;    /*
; * test1.c
; *
; * Created: 3/8/2019 11:24:16 AM
; * Author: Mohammad Amin
; */
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <mega16.h>
;#include <delay.h>
;#include <stdlib.h>
;#include <math.h>
;
;const short int NUM_OF_FLOORS = 3;

	.DSEG
;//const short int DELAY_BETWEENLFLOORS = 5000;
;
;void prepare7SegDisplay(int floor){
; 0000 0011 void prepare7SegDisplay(int floor){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0012     PORTB.0 = floor%2;
;PCODE: $0000000F VOL: 0
;	floor -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0013     PORTB.1 = floor==2||floor==3||floor==6||floor==7;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0014     PORTB.2 = floor==4||floor==5||floor==6||floor==7;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0015     PORTB.3 = floor==8||floor==9;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0016 }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;void turnOnLED(int requsted_floor) {
; 0000 0017 void turnOnLED(int requsted_floor) {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0018 	if (requsted_floor == 1) PORTC.5 = 0;
;PCODE: $00000069 VOL: 0
;	requsted_floor -> Y+0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0019 	else if (requsted_floor == 2) PORTC.6 = 0;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 001A 	else if (requsted_floor == 3) PORTC.7 = 0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 001B }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;void turnOffLED(int requsted_floor) {
; 0000 001C void turnOffLED(int requsted_floor) {
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 001D 	if (requsted_floor == 1) PORTC.5 = 1;
;PCODE: $00000085 VOL: 0
;	requsted_floor -> Y+0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 001E 	else if (requsted_floor == 2) PORTC.6 = 1;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 001F 	else if (requsted_floor == 3) PORTC.7 = 1;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0020 }
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;int getCurrentFloor(){
; 0000 0021 int getCurrentFloor(){
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0022     return PINA.2 * 3 +  PINA.1 * 2 + PINA.0;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0023 }
;PCODE: $000000B1 VOL: 0
;
;int getInBtnsFloor(){
; 0000 0025 int getInBtnsFloor(){
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0026     return PINC.2 * 3 +  PINC.1 * 2 + PINC.0;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0027 }
;PCODE: $000000C4 VOL: 0
;int getOutBtnsFloor(){
; 0000 0028 int getOutBtnsFloor(){
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0029     return PIND.2 * 3 +  PIND.1 * 2 + PIND.0;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 002A }
;PCODE: $000000D7 VOL: 0
;
;
;
;int getMaxRequestedFloor(){
; 0000 002E int getMaxRequestedFloor(){
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 002F     int max;
; 0000 0030     if(PIND.2||PINC.2) max = 3;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;	max -> R16,R17
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0031     else if(PIND.1||PINC.1) max = 2;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0032     else if(PIND.0||PINC.0) max = 1;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0033     else max = 0;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0034     return max;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0035 }
;PCODE: $00000108 VOL: 0
;int getMinRequestedFloor(){
; 0000 0036 int getMinRequestedFloor(){
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0037     int min;
; 0000 0038     if(PIND.0||PINC.0) min = 1;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;	min -> R16,R17
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0039     else if(PIND.1||PINC.1) min = 2;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 003A     else if(PIND.2||PINC.2) min = 3;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 003B     else min = 0;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 003C     return min;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 003D }
;PCODE: $00000139 VOL: 0
;void onArriveFloor(int floor){
; 0000 003E void onArriveFloor(int floor){
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 003F 	if (floor == 1) { PIND.0 = 0; PINC.0 = 0; };
;PCODE: $0000013C VOL: 0
;	floor -> Y+0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0040 	if (floor == 2) { PIND.1 = 0; PINC.1 = 0; }
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0041 	if (floor == 3) { PIND.2 = 0; PINC.2 = 0; }
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0042 }
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;
;short getDirection(){
; 0000 0044 short getDirection(){
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0045     return !PINA.6?(PINA.7?-1:0):1;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0046 }
;PCODE: $0000016C VOL: 0
;
;/*
;inline void moveElevator(){
;    short direction = getDirection();
;    short curr_floor = getCurrentFloor();
;
;    if(direction>0){
;        while(getMaxRequestedFloor()-curr_floor){
;            int d=0;
;            while(d++<DELAY_BETWEENLFLOORS);
;            onArriveFloor(direction);
;            setCurrentFloor(++curr_floor);
;
;        }
;    }
;    else if(direction>0){
;        while(getMinRequestedFloor()-curr_floor){
;            int d=0;
;            while(d++<DELAY_BETWEENLFLOORS);
;            onArriveFloor(direction);
;            setCurrentFloor(--curr_floor);
;        }
;    }
;    setDirection(direction);
;
;}
;*/
;
;short isElevatorEmpty(){
; 0000 0063 short isElevatorEmpty(){
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0064     return PINB.5==1;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0065 }
;PCODE: $00000175 VOL: 0
;short isElevatorOk() {
; 0000 0066 short isElevatorOk() {
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 0067 	return PINB.6 == 1;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0068 }
;PCODE: $0000017E VOL: 0
;short isElevatorOverWeight(){
; 0000 0069 short isElevatorOverWeight(){
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 006A     return PINB.7==1;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 006B }
;PCODE: $00000187 VOL: 0
;
;void initialization();
;struct Node {
;	struct Node* next;
;	int f;
;	int p;
;};
;struct pQueue {
;	struct Node* head;
;};
;void initQueue(struct pQueue *queue);
;void enQueue(struct pQueue* queue, struct Node n);
;struct Node* deQueue(struct pQueue* queue);
;short removeQueue(struct pQueue* queue, struct Node * node);
;struct Node* searchQueue(struct pQueue* queue, int f);
;int sizeOfQueue(struct pQueue* queue);
;
;void main(void)
; 0000 007E {
;PCODE: $00000188 VOL: 0
; 0000 007F 	struct pQueue f_queue;
; 0000 0080 	initQueue(&f_queue);
;PCODE: $00000189 VOL: 0
;	f_queue -> Y+0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0081 
; 0000 0082 	initialization();
;PCODE: $0000018C VOL: 0
; 0000 0083 
; 0000 0084     while (1){
;PCODE: $0000018D VOL: 0
; 0000 0085 
; 0000 0086 		int in_req = getInBtnsFloor(), out_req = getOutBtnsFloor();
; 0000 0087 		int curr_floor = getCurrentFloor();
; 0000 0088 		prepare7SegDisplay(curr_floor);
;PCODE: $0000018E VOL: 0
;	f_queue -> Y+6
;	in_req -> Y+4
;	out_req -> Y+2
;	curr_floor -> Y+0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0089 
; 0000 008A 
; 0000 008B 		if (in_req!=0) {
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 008C 			if(curr_floor!=in_req)
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 008D 				if (isElevatorOverWeight() == 0)
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 008E 					turnOnLED(in_req);
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 008F 
; 0000 0090 			//n.f = min_f;
; 0000 0091 			//n.p = abs(min_f - getCurrentFloor());
; 0000 0092 			//n.next = 0;
; 0000 0093 			//if (!searchQueue(&f_queue, min_f)) enQueue(&f_queue, n);
; 0000 0094 		}
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 0095 		if (out_req!=0) {
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0096 			if (curr_floor != out_req)
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0097 				turnOnLED(out_req);
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0098 			//n.f = max_f;
; 0000 0099 			//n.p = abs(max_f - getCurrentFloor());
; 0000 009A 			//n.next = 0;
; 0000 009B 			//if(!searchQueue(&f_queue,max_f)) enQueue(&f_queue,n);
; 0000 009C 		}
;PCODE: $000001AF VOL: 0
; 0000 009D 
; 0000 009E 		if (getDirection() != 0) {
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 009F 			turnOffLED(curr_floor);
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 00A0 			//if (searchQueue(&f_queue, curr_floor)) onArriveFloor(curr_floor);
; 0000 00A1 
; 0000 00A2 		}
; 0000 00A3 
; 0000 00A4 
; 0000 00A5 
; 0000 00A6     }
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 00A7 }
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;
;void initialization(){
; 0000 00A9 void initialization(){
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 00AA 	// Declare your local variables here
; 0000 00AB 
; 0000 00AC 	// Input/Output Ports initialization
; 0000 00AD 	// Port A initialization
; 0000 00AE 	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00AF 	DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 00B0 	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00B1 	PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 00B2 
; 0000 00B3 	// Port B initialization
; 0000 00B4 	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00B5 
; 0000 00B6 	DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 00B7 	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00B8 	PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 00B9 
; 0000 00BA 	// Port C initialization
; 0000 00BB 	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00BC 	DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 00BD 	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00BE 	PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 00BF 
; 0000 00C0 	// Port D initialization
; 0000 00C1 	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00C2 	DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 00C3 	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00C4 	PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 00C5 
; 0000 00C6 	// Timer/Counter 0 initialization
; 0000 00C7 	// Clock source: System Clock
; 0000 00C8 	// Clock value: Timer 0 Stopped
; 0000 00C9 	// Mode: Normal top=0xFF
; 0000 00CA 	// OC0 output: Disconnected
; 0000 00CB 	TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 00CC 	TCNT0=0x00;
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 00CD 	OCR0=0x00;
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 00CE 
; 0000 00CF 	// Timer/Counter 1 initialization
; 0000 00D0 	// Clock source: System Clock
; 0000 00D1 	// Clock value: Timer1 Stopped
; 0000 00D2 	// Mode: Normal top=0xFFFF
; 0000 00D3 	// OC1A output: Disconnected
; 0000 00D4 	// OC1B output: Disconnected
; 0000 00D5 	// Noise Canceler: Off
; 0000 00D6 	// Input Capture on Falling Edge
; 0000 00D7 	// Timer1 Overflow Interrupt: Off
; 0000 00D8 	// Input Capture Interrupt: Off
; 0000 00D9 	// Compare A Match Interrupt: Off
; 0000 00DA 	// Compare B Match Interrupt: Off
; 0000 00DB 	TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 00DC 	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 00DD 	TCNT1H=0x00;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 00DE 	TCNT1L=0x00;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 00DF 	ICR1H=0x00;
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 00E0 	ICR1L=0x00;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 00E1 	OCR1AH=0x00;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 00E2 	OCR1AL=0x00;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 00E3 	OCR1BH=0x00;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 00E4 	OCR1BL=0x00;
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 00E5 
; 0000 00E6 	// Timer/Counter 2 initialization
; 0000 00E7 	// Clock source: System Clock
; 0000 00E8 	// Clock value: Timer2 Stopped
; 0000 00E9 	// Mode: Normal top=0xFF
; 0000 00EA 	// OC2 output: Disconnected
; 0000 00EB 	ASSR=0<<AS2;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 00EC 	TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 00ED 	TCNT2=0x00;
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 00EE 	OCR2=0x00;
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 00EF 
; 0000 00F0 	// Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00F1 	TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 00F2 
; 0000 00F3 	// External Interrupt(s) initialization
; 0000 00F4 	// INT0: Off
; 0000 00F5 	// INT1: Off
; 0000 00F6 	// INT2: Off
; 0000 00F7 	MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 00F8 	MCUCSR=(0<<ISC2);
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 00F9 
; 0000 00FA 	// USART initialization
; 0000 00FB 	// USART disabled
; 0000 00FC 	UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 00FD 
; 0000 00FE 	// Analog Comparator initialization
; 0000 00FF 	// Analog Comparator: Off
; 0000 0100 	// The Analog Comparator's positive input is
; 0000 0101 	// connected to the AIN0 pin
; 0000 0102 	// The Analog Comparator's negative input is
; 0000 0103 	// connected to the AIN1 pin
; 0000 0104 	ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 0105 	SFIOR=(0<<ACME);
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 0106 
; 0000 0107 	// ADC initialization
; 0000 0108 	// ADC disabled
; 0000 0109 	ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 010A 
; 0000 010B 	// SPI initialization
; 0000 010C 	// SPI disabled
; 0000 010D 	SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 010E 
; 0000 010F 	// TWI initialization
; 0000 0110 	// TWI disabled
; 0000 0111 	TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 0112 
; 0000 0113 }
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;
;
;
;
;
;
;void initQueue(struct pQueue *queue){
; 0000 011A void initQueue(struct pQueue *queue){
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 011B     queue->head = 0;
;PCODE: $00000208 VOL: 0
;	*queue -> Y+0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 011C }
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;
;void enQueue(struct pQueue* queue, struct Node n){
; 0000 011E void enQueue(struct pQueue* queue, struct Node n){
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 011F     struct Node* curr = queue->head;
; 0000 0120     struct Node* node = (struct Node*)malloc(sizeof(n));
; 0000 0121     node->f = n.f;
;PCODE: $00000211 VOL: 0
;	*queue -> Y+10
;	n -> Y+4
;	*curr -> R16,R17
;	*node -> R18,R19
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 0122     node->p = n.p;
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 0123     node->next = 0;
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0124     if(!queue->head){
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 0125         queue->head = node;
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0126         return;
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 0127     }
; 0000 0128     if(node->p < queue->head->p){
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0129         node->next = queue->head;
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 012A         queue->head = node;
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 012B         return;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 012C     }
; 0000 012D     if(!queue->head->next){
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 012E         queue->head->next = node;
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 012F         return;
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 0130     }
; 0000 0131     while (curr->next->next){
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 0132         if(node->p < curr->next->p){
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 0133             node->next = curr->next;
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 0134             curr->next = node;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 0135             return;
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 0136         }
; 0000 0137         curr = curr->next;
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 0138     }
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 0139     curr->next->next = node;
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 013A 
; 0000 013B }
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;short removeQueue(struct pQueue* queue, struct Node * node) {
; 0000 013C short removeQueue(struct pQueue* queue, struct Node * node) {
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 013D 	struct Node* curr = queue->head;
; 0000 013E 	if (!curr) return 0;
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;	*queue -> Y+4
;	*node -> Y+2
;	*curr -> R16,R17
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 013F 	if (node == curr) {
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 0140 		queue->head = queue->head->next;
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 0141 		free(node);
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 0142 		return 1;
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 0143 	}
; 0000 0144 	while (curr->next) {
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 0145 		if (curr->next == node) {
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 0146 			curr->next = curr->next->next;
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 0147 			free(node);
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 0148 			return 1;
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 0149 		}
; 0000 014A 		curr = curr->next;
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 014B 	}
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 014C 	return 0;
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 014D }
;PCODE: $000002BF VOL: 0
;struct Node* deQueue(struct pQueue* queue){
; 0000 014E struct Node* deQueue(struct pQueue* queue){
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 014F     struct Node* temp = queue->head;
; 0000 0150     if(!temp) return 0;
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;	*queue -> Y+2
;	*temp -> R16,R17
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 0151     queue->head = queue->head->next;
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 0152     return temp;
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 0153 }
;PCODE: $000002DF VOL: 0
;
;struct Node* searchQueue(struct pQueue* queue,int f){
; 0000 0155 struct Node* searchQueue(struct pQueue* queue,int f){
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 0156     struct Node* curr = queue->head;
; 0000 0157     if(!curr) return 0;
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;	*queue -> Y+4
;	f -> Y+2
;	*curr -> R16,R17
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 0158     while(curr->next && curr->f != f) curr = curr->next;
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0000 0159 return (curr->f==f)?curr:0;
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 015A 
; 0000 015B }
;PCODE: $00000315 VOL: 0
;int sizeOfQueue(struct pQueue* queue) {
; 0000 015C int sizeOfQueue(struct pQueue* queue) {
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 015D 	struct Node* cur = queue->head;
; 0000 015E 	int count = 0;
; 0000 015F 	while (cur!=NULL) { count=7; cur = cur->next;}
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;	*queue -> Y+4
;	*cur -> R16,R17
;	count -> R18,R19
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0000 0160 	return count;
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 0161 
; 0000 0162 }
;PCODE: $0000032C VOL: 0
