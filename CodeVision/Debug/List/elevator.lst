
AVRASM ver. 2.1.30  E:\MicroController\ATmega16-Elevator\CodeVision\Debug\List\elevator.asm Sat Mar 09 22:51:57 2019

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0035 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
E:\MicroController\ATmega16-Elevator\CodeVision\Debug\List\elevator.asm(1117): warning: .cseg .db misalignment - padding zero byte
00002a 0003      	.DB  0x3
                 _0x2000060:
E:\MicroController\ATmega16-Elevator\CodeVision\Debug\List\elevator.asm(1119): warning: .cseg .db misalignment - padding zero byte
00002b 0001      	.DB  0x1
                 _0x2000000:
00002c 4e2d
00002d 4e41
00002e 4900
00002f 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\MicroController\ATmega16-Elevator\CodeVision\Debug\List\elevator.asm(1122): warning: .cseg .db misalignment - padding zero byte
000030 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000031 0001      	.DW  0x01
000032 0160      	.DW  __seed_G100
000033 0056      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
000034 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000035 94f8      	CLI
000036 27ee      	CLR  R30
000037 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000038 e0f1      	LDI  R31,1
000039 bffb      	OUT  GICR,R31
00003a bfeb      	OUT  GICR,R30
00003b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003c e08d      	LDI  R24,(14-2)+1
00003d e0a2      	LDI  R26,2
00003e 27bb      	CLR  R27
                 __CLEAR_REG:
00003f 93ed      	ST   X+,R30
000040 958a      	DEC  R24
000041 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000042 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000043 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000044 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000045 93ed      	ST   X+,R30
000046 9701      	SBIW R24,1
000047 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000048 e6e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000049 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004a 9185      	LPM  R24,Z+
00004b 9195      	LPM  R25,Z+
00004c 9700      	SBIW R24,0
00004d f061      	BREQ __GLOBAL_INI_END
00004e 91a5      	LPM  R26,Z+
00004f 91b5      	LPM  R27,Z+
000050 9005      	LPM  R0,Z+
000051 9015      	LPM  R1,Z+
000052 01bf      	MOVW R22,R30
000053 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000054 9005      	LPM  R0,Z+
000055 920d      	ST   X+,R0
000056 9701      	SBIW R24,1
000057 f7e1      	BRNE __GLOBAL_INI_LOOP
000058 01fb      	MOVW R30,R22
000059 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005a e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005b bfed      	OUT  SPL,R30
00005c e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005e e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005f e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000060 940c 011d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;    /*
                 ; * test1.c
                 ; *
                 ; * Created: 3/8/2019 11:24:16 AM
                 ; * Author: Mohammad Amin
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <mega16.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;#include <math.h>
                 ;
                 ;const short int NUM_OF_FLOORS = 3;
                 
                 	.DSEG
                 ;//const short int DELAY_BETWEENLFLOORS = 5000;
                 ;
                 ;void prepare7SegDisplay(int floor){
                 ; 0000 0011 void prepare7SegDisplay(int floor){
                 
                 	.CSEG
                 _prepare7SegDisplay:
                 ; .FSTART _prepare7SegDisplay
                 ; 0000 0012     PORTB.0 = floor%2;
000062 93ba      	ST   -Y,R27
000063 93aa      	ST   -Y,R26
                 ;	floor -> Y+0
000064 81e8      	LD   R30,Y
000065 81f9      	LDD  R31,Y+1
000066 e0a1      	LDI  R26,LOW(1)
000067 e0b0      	LDI  R27,HIGH(1)
000068 940e 0195 	CALL __MANDW12
00006a 30e0      	CPI  R30,0
00006b f411      	BRNE _0x4
00006c 98c0      	CBI  0x18,0
00006d c001      	RJMP _0x5
                 _0x4:
00006e 9ac0      	SBI  0x18,0
                 _0x5:
                 ; 0000 0013     PORTB.1 = floor==2||floor==3||floor==6||floor==7;
00006f 81a8      	LD   R26,Y
000070 81b9      	LDD  R27,Y+1
000071 9712      	SBIW R26,2
000072 f071      	BREQ _0x6
000073 81a8      	LD   R26,Y
000074 81b9      	LDD  R27,Y+1
000075 9713      	SBIW R26,3
000076 f051      	BREQ _0x6
000077 81a8      	LD   R26,Y
000078 81b9      	LDD  R27,Y+1
000079 9716      	SBIW R26,6
00007a f031      	BREQ _0x6
00007b 81a8      	LD   R26,Y
00007c 81b9      	LDD  R27,Y+1
00007d 9717      	SBIW R26,7
00007e f011      	BREQ _0x6
00007f e0e0      	LDI  R30,0
000080 c001      	RJMP _0x7
                 _0x6:
000081 e0e1      	LDI  R30,1
                 _0x7:
000082 30e0      	CPI  R30,0
000083 f411      	BRNE _0x8
000084 98c1      	CBI  0x18,1
000085 c001      	RJMP _0x9
                 _0x8:
000086 9ac1      	SBI  0x18,1
                 _0x9:
                 ; 0000 0014     PORTB.2 = floor==4||floor==5||floor==6||floor==7;
000087 81a8      	LD   R26,Y
000088 81b9      	LDD  R27,Y+1
000089 9714      	SBIW R26,4
00008a f071      	BREQ _0xA
00008b 81a8      	LD   R26,Y
00008c 81b9      	LDD  R27,Y+1
00008d 9715      	SBIW R26,5
00008e f051      	BREQ _0xA
00008f 81a8      	LD   R26,Y
000090 81b9      	LDD  R27,Y+1
000091 9716      	SBIW R26,6
000092 f031      	BREQ _0xA
000093 81a8      	LD   R26,Y
000094 81b9      	LDD  R27,Y+1
000095 9717      	SBIW R26,7
000096 f011      	BREQ _0xA
000097 e0e0      	LDI  R30,0
000098 c001      	RJMP _0xB
                 _0xA:
000099 e0e1      	LDI  R30,1
                 _0xB:
00009a 30e0      	CPI  R30,0
00009b f411      	BRNE _0xC
00009c 98c2      	CBI  0x18,2
00009d c001      	RJMP _0xD
                 _0xC:
00009e 9ac2      	SBI  0x18,2
                 _0xD:
                 ; 0000 0015     PORTB.3 = floor==8||floor==9;
00009f 81a8      	LD   R26,Y
0000a0 81b9      	LDD  R27,Y+1
0000a1 9718      	SBIW R26,8
0000a2 f031      	BREQ _0xE
0000a3 81a8      	LD   R26,Y
0000a4 81b9      	LDD  R27,Y+1
0000a5 9719      	SBIW R26,9
0000a6 f011      	BREQ _0xE
0000a7 e0e0      	LDI  R30,0
0000a8 c001      	RJMP _0xF
                 _0xE:
0000a9 e0e1      	LDI  R30,1
                 _0xF:
0000aa 30e0      	CPI  R30,0
0000ab f411      	BRNE _0x10
0000ac 98c3      	CBI  0x18,3
0000ad c001      	RJMP _0x11
                 _0x10:
0000ae 9ac3      	SBI  0x18,3
                 _0x11:
                 ; 0000 0016 }
0000af c0d4      	RJMP _0x2080001
                 ; .FEND
                 ;void turnOnLED(int requsted_floor) {
                 ; 0000 0017 void turnOnLED(int requsted_floor) {
                 _turnOnLED:
                 ; .FSTART _turnOnLED
                 ; 0000 0018 	if (requsted_floor == 1) PORTC.5 = 0;
0000b0 93ba      	ST   -Y,R27
0000b1 93aa      	ST   -Y,R26
                 ;	requsted_floor -> Y+0
0000b2 81a8      	LD   R26,Y
0000b3 81b9      	LDD  R27,Y+1
0000b4 9711      	SBIW R26,1
0000b5 f411      	BRNE _0x12
0000b6 98ad      	CBI  0x15,5
                 ; 0000 0019 	else if (requsted_floor == 2) PORTC.6 = 0;
0000b7 c00b      	RJMP _0x15
                 _0x12:
0000b8 81a8      	LD   R26,Y
0000b9 81b9      	LDD  R27,Y+1
0000ba 9712      	SBIW R26,2
0000bb f411      	BRNE _0x16
0000bc 98ae      	CBI  0x15,6
                 ; 0000 001A 	else if (requsted_floor == 3) PORTC.7 = 0;
0000bd c005      	RJMP _0x19
                 _0x16:
0000be 81a8      	LD   R26,Y
0000bf 81b9      	LDD  R27,Y+1
0000c0 9713      	SBIW R26,3
0000c1 f409      	BRNE _0x1A
0000c2 98af      	CBI  0x15,7
                 ; 0000 001B }
                 _0x1A:
                 _0x19:
                 _0x15:
0000c3 c0c0      	RJMP _0x2080001
                 ; .FEND
                 ;void turnOffLED(int requsted_floor) {
                 ; 0000 001C void turnOffLED(int requsted_floor) {
                 _turnOffLED:
                 ; .FSTART _turnOffLED
                 ; 0000 001D 	if (requsted_floor == 1) PORTC.5 = 1;
0000c4 93ba      	ST   -Y,R27
0000c5 93aa      	ST   -Y,R26
                 ;	requsted_floor -> Y+0
0000c6 81a8      	LD   R26,Y
0000c7 81b9      	LDD  R27,Y+1
0000c8 9711      	SBIW R26,1
0000c9 f411      	BRNE _0x1D
0000ca 9aad      	SBI  0x15,5
                 ; 0000 001E 	else if (requsted_floor == 2) PORTC.6 = 1;
0000cb c00b      	RJMP _0x20
                 _0x1D:
0000cc 81a8      	LD   R26,Y
0000cd 81b9      	LDD  R27,Y+1
0000ce 9712      	SBIW R26,2
0000cf f411      	BRNE _0x21
0000d0 9aae      	SBI  0x15,6
                 ; 0000 001F 	else if (requsted_floor == 3) PORTC.7 = 1;
0000d1 c005      	RJMP _0x24
                 _0x21:
0000d2 81a8      	LD   R26,Y
0000d3 81b9      	LDD  R27,Y+1
0000d4 9713      	SBIW R26,3
0000d5 f409      	BRNE _0x25
0000d6 9aaf      	SBI  0x15,7
                 ; 0000 0020 }
                 _0x25:
                 _0x24:
                 _0x20:
0000d7 c0ac      	RJMP _0x2080001
                 ; .FEND
                 ;int getCurrentFloor(){
                 ; 0000 0021 int getCurrentFloor(){
                 _getCurrentFloor:
                 ; .FSTART _getCurrentFloor
                 ; 0000 0022     return PINA.2 * 3 +  PINA.1 * 2 + PINA.0;
0000d8 e0a0      	LDI  R26,0
0000d9 99ca      	SBIC 0x19,2
0000da e0a1      	LDI  R26,1
0000db e0e3      	LDI  R30,LOW(3)
0000dc 9fea      	MUL  R30,R26
0000dd 2d60      	MOV  R22,R0
0000de e0a0      	LDI  R26,0
0000df 99c9      	SBIC 0x19,1
0000e0 e0a1      	LDI  R26,1
0000e1 940e 0186 	CALL SUBOPT_0x0
0000e3 e0e0      	LDI  R30,0
0000e4 99c8      	SBIC 0x19,0
0000e5 e0e1      	LDI  R30,1
0000e6 0fea      	ADD  R30,R26
0000e7 c033      	RJMP _0x2080002
                 ; 0000 0023 }
                 ; .FEND
                 ;
                 ;int getInBtnsFloor(){
                 ; 0000 0025 int getInBtnsFloor(){
                 _getInBtnsFloor:
                 ; .FSTART _getInBtnsFloor
                 ; 0000 0026     return PINC.2 * 3 +  PINC.1 * 2 + PINC.0;
0000e8 e0a0      	LDI  R26,0
0000e9 999a      	SBIC 0x13,2
0000ea e0a1      	LDI  R26,1
0000eb e0e3      	LDI  R30,LOW(3)
0000ec 9fea      	MUL  R30,R26
0000ed 2d60      	MOV  R22,R0
0000ee e0a0      	LDI  R26,0
0000ef 9999      	SBIC 0x13,1
0000f0 e0a1      	LDI  R26,1
0000f1 940e 0186 	CALL SUBOPT_0x0
0000f3 e0e0      	LDI  R30,0
0000f4 9998      	SBIC 0x13,0
0000f5 e0e1      	LDI  R30,1
0000f6 0fea      	ADD  R30,R26
0000f7 c023      	RJMP _0x2080002
                 ; 0000 0027 }
                 ; .FEND
                 ;int getOutBtnsFloor(){
                 ; 0000 0028 int getOutBtnsFloor(){
                 _getOutBtnsFloor:
                 ; .FSTART _getOutBtnsFloor
                 ; 0000 0029     return PIND.2 * 3 +  PIND.1 * 2 + PIND.0;
0000f8 e0a0      	LDI  R26,0
0000f9 9982      	SBIC 0x10,2
0000fa e0a1      	LDI  R26,1
0000fb e0e3      	LDI  R30,LOW(3)
0000fc 9fea      	MUL  R30,R26
0000fd 2d60      	MOV  R22,R0
0000fe e0a0      	LDI  R26,0
0000ff 9981      	SBIC 0x10,1
000100 e0a1      	LDI  R26,1
000101 940e 0186 	CALL SUBOPT_0x0
000103 e0e0      	LDI  R30,0
000104 9980      	SBIC 0x10,0
000105 e0e1      	LDI  R30,1
000106 0fea      	ADD  R30,R26
000107 c013      	RJMP _0x2080002
                 ; 0000 002A }
                 ; .FEND
                 ;
                 ;
                 ;
                 ;int getMaxRequestedFloor(){
                 ; 0000 002E int getMaxRequestedFloor(){
                 ; 0000 002F     int max;
                 ; 0000 0030     if(PIND.2||PINC.2) max = 3;
                 ;	max -> R16,R17
                 ; 0000 0031     else if(PIND.1||PINC.1) max = 2;
                 ; 0000 0032     else if(PIND.0||PINC.0) max = 1;
                 ; 0000 0033     else max = 0;
                 ; 0000 0034     return max;
                 ; 0000 0035 }
                 ;int getMinRequestedFloor(){
                 ; 0000 0036 int getMinRequestedFloor(){
                 ; 0000 0037     int min;
                 ; 0000 0038     if(PIND.0||PINC.0) min = 1;
                 ;	min -> R16,R17
                 ; 0000 0039     else if(PIND.1||PINC.1) min = 2;
                 ; 0000 003A     else if(PIND.2||PINC.2) min = 3;
                 ; 0000 003B     else min = 0;
                 ; 0000 003C     return min;
                 ; 0000 003D }
                 ;void onArriveFloor(int floor){
                 ; 0000 003E void onArriveFloor(int floor){
                 ; 0000 003F 	if (floor == 1) { PIND.0 = 0; PINC.0 = 0; };
                 ;	floor -> Y+0
                 ; 0000 0040 	if (floor == 2) { PIND.1 = 0; PINC.1 = 0; }
                 ; 0000 0041 	if (floor == 3) { PIND.2 = 0; PINC.2 = 0; }
                 ; 0000 0042 }
                 ;
                 ;short getDirection(){
                 ; 0000 0044 short getDirection(){
                 _getDirection:
                 ; .FSTART _getDirection
                 ; 0000 0045     return !PINA.6?(PINA.7?-1:0):1;
000108 99ce      	SBIC 0x19,6
000109 c008      	RJMP _0x4F
00010a 9bcf      	SBIS 0x19,7
00010b c003      	RJMP _0x50
00010c efef      	LDI  R30,LOW(65535)
00010d efff      	LDI  R31,HIGH(65535)
00010e c002      	RJMP _0x51
                 _0x50:
00010f e0e0      	LDI  R30,LOW(0)
000110 e0f0      	LDI  R31,HIGH(0)
                 _0x51:
000111 c002      	RJMP _0x53
                 _0x4F:
000112 e0e1      	LDI  R30,LOW(1)
000113 e0f0      	LDI  R31,HIGH(1)
                 _0x53:
000114 9508      	RET
                 ; 0000 0046 }
                 ; .FEND
                 ;
                 ;/*
                 ;inline void moveElevator(){
                 ;    short direction = getDirection();
                 ;    short curr_floor = getCurrentFloor();
                 ;
                 ;    if(direction>0){
                 ;        while(getMaxRequestedFloor()-curr_floor){
                 ;            int d=0;
                 ;            while(d++<DELAY_BETWEENLFLOORS);
                 ;            onArriveFloor(direction);
                 ;            setCurrentFloor(++curr_floor);
                 ;
                 ;        }
                 ;    }
                 ;    else if(direction>0){
                 ;        while(getMinRequestedFloor()-curr_floor){
                 ;            int d=0;
                 ;            while(d++<DELAY_BETWEENLFLOORS);
                 ;            onArriveFloor(direction);
                 ;            setCurrentFloor(--curr_floor);
                 ;        }
                 ;    }
                 ;    setDirection(direction);
                 ;
                 ;}
                 ;*/
                 ;
                 ;short isElevatorEmpty(){
                 ; 0000 0063 short isElevatorEmpty(){
                 ; 0000 0064     return PINB.5==1;
                 ; 0000 0065 }
                 ;short isElevatorOk() {
                 ; 0000 0066 short isElevatorOk() {
                 ; 0000 0067 	return PINB.6 == 1;
                 ; 0000 0068 }
                 ;short isElevatorOverWeight(){
                 ; 0000 0069 short isElevatorOverWeight(){
                 _isElevatorOverWeight:
                 ; .FSTART _isElevatorOverWeight
                 ; 0000 006A     return PINB.7==1;
000115 e0a0      	LDI  R26,0
000116 99b7      	SBIC 0x16,7
000117 e0a1      	LDI  R26,1
000118 e0e1      	LDI  R30,LOW(1)
000119 940e 0190 	CALL __EQB12
                 _0x2080002:
00011b e0f0      	LDI  R31,0
00011c 9508      	RET
                 ; 0000 006B }
                 ; .FEND
                 ;
                 ;void initialization();
                 ;struct Node {
                 ;	struct Node* next;
                 ;	int f;
                 ;	int p;
                 ;};
                 ;struct pQueue {
                 ;	struct Node* head;
                 ;};
                 ;void initQueue(struct pQueue *queue);
                 ;void enQueue(struct pQueue* queue, struct Node n);
                 ;struct Node* deQueue(struct pQueue* queue);
                 ;short removeQueue(struct pQueue* queue, struct Node * node);
                 ;struct Node* searchQueue(struct pQueue* queue, int f);
                 ;int sizeOfQueue(struct pQueue* queue);
                 ;
                 ;void main(void)
                 ; 0000 007E {
                 _main:
                 ; .FSTART _main
                 ; 0000 007F 	struct pQueue f_queue;
                 ; 0000 0080 	initQueue(&f_queue);
00011d 9722      	SBIW R28,2
                 ;	f_queue -> Y+0
00011e 01de      	MOVW R26,R28
00011f d05c      	RCALL _initQueue
                 ; 0000 0081 
                 ; 0000 0082 	initialization();
000120 d031      	RCALL _initialization
                 ; 0000 0083 
                 ; 0000 0084     while (1){
                 _0x55:
                 ; 0000 0085 
                 ; 0000 0086 		int in_req = getInBtnsFloor(), out_req = getOutBtnsFloor();
                 ; 0000 0087 		int curr_floor = getCurrentFloor();
                 ; 0000 0088 		prepare7SegDisplay(curr_floor);
000121 9726      	SBIW R28,6
                 ;	f_queue -> Y+6
                 ;	in_req -> Y+4
                 ;	out_req -> Y+2
                 ;	curr_floor -> Y+0
000122 dfc5      	RCALL _getInBtnsFloor
000123 83ec      	STD  Y+4,R30
000124 83fd      	STD  Y+4+1,R31
000125 dfd2      	RCALL _getOutBtnsFloor
000126 83ea      	STD  Y+2,R30
000127 83fb      	STD  Y+2+1,R31
000128 dfaf      	RCALL _getCurrentFloor
000129 83e8      	ST   Y,R30
00012a 83f9      	STD  Y+1,R31
00012b 81a8      	LD   R26,Y
00012c 81b9      	LDD  R27,Y+1
00012d df34      	RCALL _prepare7SegDisplay
                 ; 0000 0089 
                 ; 0000 008A 
                 ; 0000 008B 		if (in_req!=0) {
00012e 81ec      	LDD  R30,Y+4
00012f 81fd      	LDD  R31,Y+4+1
000130 9730      	SBIW R30,0
000131 f059      	BREQ _0x58
                 ; 0000 008C 			if(curr_floor!=in_req)
000132 81a8      	LD   R26,Y
000133 81b9      	LDD  R27,Y+1
000134 17ea      	CP   R30,R26
000135 07fb      	CPC  R31,R27
000136 f031      	BREQ _0x59
                 ; 0000 008D 				if (isElevatorOverWeight() == 0)
000137 dfdd      	RCALL _isElevatorOverWeight
000138 9730      	SBIW R30,0
000139 f419      	BRNE _0x5A
                 ; 0000 008E 					turnOnLED(in_req);
00013a 81ac      	LDD  R26,Y+4
00013b 81bd      	LDD  R27,Y+4+1
00013c df73      	RCALL _turnOnLED
                 ; 0000 008F 
                 ; 0000 0090 			//n.f = min_f;
                 ; 0000 0091 			//n.p = abs(min_f - getCurrentFloor());
                 ; 0000 0092 			//n.next = 0;
                 ; 0000 0093 			//if (!searchQueue(&f_queue, min_f)) enQueue(&f_queue, n);
                 ; 0000 0094 		}
                 _0x5A:
                 _0x59:
                 ; 0000 0095 		if (out_req!=0) {
                 _0x58:
00013d 81ea      	LDD  R30,Y+2
00013e 81fb      	LDD  R31,Y+2+1
00013f 9730      	SBIW R30,0
000140 f041      	BREQ _0x5B
                 ; 0000 0096 			if (curr_floor != out_req)
000141 81a8      	LD   R26,Y
000142 81b9      	LDD  R27,Y+1
000143 17ea      	CP   R30,R26
000144 07fb      	CPC  R31,R27
000145 f019      	BREQ _0x5C
                 ; 0000 0097 				turnOnLED(out_req);
000146 81aa      	LDD  R26,Y+2
000147 81bb      	LDD  R27,Y+2+1
000148 df67      	RCALL _turnOnLED
                 ; 0000 0098 			//n.f = max_f;
                 ; 0000 0099 			//n.p = abs(max_f - getCurrentFloor());
                 ; 0000 009A 			//n.next = 0;
                 ; 0000 009B 			//if(!searchQueue(&f_queue,max_f)) enQueue(&f_queue,n);
                 ; 0000 009C 		}
                 _0x5C:
                 ; 0000 009D 
                 ; 0000 009E 		if (getDirection() != 0) {
                 _0x5B:
000149 dfbe      	RCALL _getDirection
00014a 9730      	SBIW R30,0
00014b f019      	BREQ _0x5D
                 ; 0000 009F 			turnOffLED(curr_floor);
00014c 81a8      	LD   R26,Y
00014d 81b9      	LDD  R27,Y+1
00014e df75      	RCALL _turnOffLED
                 ; 0000 00A0 			//if (searchQueue(&f_queue, curr_floor)) onArriveFloor(curr_floor);
                 ; 0000 00A1 
                 ; 0000 00A2 		}
                 ; 0000 00A3 
                 ; 0000 00A4 
                 ; 0000 00A5 
                 ; 0000 00A6     }
                 _0x5D:
00014f 9626      	ADIW R28,6
000150 cfd0      	RJMP _0x55
                 ; 0000 00A7 }
                 _0x5E:
000151 cfff      	RJMP _0x5E
                 ; .FEND
                 ;
                 ;void initialization(){
                 ; 0000 00A9 void initialization(){
                 _initialization:
                 ; .FSTART _initialization
                 ; 0000 00AA 	// Declare your local variables here
                 ; 0000 00AB 
                 ; 0000 00AC 	// Input/Output Ports initialization
                 ; 0000 00AD 	// Port A initialization
                 ; 0000 00AE 	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00AF 	DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000152 e0e0      	LDI  R30,LOW(0)
000153 bbea      	OUT  0x1A,R30
                 ; 0000 00B0 	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00B1 	PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000154 bbeb      	OUT  0x1B,R30
                 ; 0000 00B2 
                 ; 0000 00B3 	// Port B initialization
                 ; 0000 00B4 	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00B5 
                 ; 0000 00B6 	DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
000155 e0ef      	LDI  R30,LOW(15)
000156 bbe7      	OUT  0x17,R30
                 ; 0000 00B7 	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00B8 	PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000157 e0e0      	LDI  R30,LOW(0)
000158 bbe8      	OUT  0x18,R30
                 ; 0000 00B9 
                 ; 0000 00BA 	// Port C initialization
                 ; 0000 00BB 	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00BC 	DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000159 eee0      	LDI  R30,LOW(224)
00015a bbe4      	OUT  0x14,R30
                 ; 0000 00BD 	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00BE 	PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00015b bbe5      	OUT  0x15,R30
                 ; 0000 00BF 
                 ; 0000 00C0 	// Port D initialization
                 ; 0000 00C1 	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00C2 	DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00015c e0e0      	LDI  R30,LOW(0)
00015d bbe1      	OUT  0x11,R30
                 ; 0000 00C3 	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00C4 	PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00015e bbe2      	OUT  0x12,R30
                 ; 0000 00C5 
                 ; 0000 00C6 	// Timer/Counter 0 initialization
                 ; 0000 00C7 	// Clock source: System Clock
                 ; 0000 00C8 	// Clock value: Timer 0 Stopped
                 ; 0000 00C9 	// Mode: Normal top=0xFF
                 ; 0000 00CA 	// OC0 output: Disconnected
                 ; 0000 00CB 	TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00015f bfe3      	OUT  0x33,R30
                 ; 0000 00CC 	TCNT0=0x00;
000160 bfe2      	OUT  0x32,R30
                 ; 0000 00CD 	OCR0=0x00;
000161 bfec      	OUT  0x3C,R30
                 ; 0000 00CE 
                 ; 0000 00CF 	// Timer/Counter 1 initialization
                 ; 0000 00D0 	// Clock source: System Clock
                 ; 0000 00D1 	// Clock value: Timer1 Stopped
                 ; 0000 00D2 	// Mode: Normal top=0xFFFF
                 ; 0000 00D3 	// OC1A output: Disconnected
                 ; 0000 00D4 	// OC1B output: Disconnected
                 ; 0000 00D5 	// Noise Canceler: Off
                 ; 0000 00D6 	// Input Capture on Falling Edge
                 ; 0000 00D7 	// Timer1 Overflow Interrupt: Off
                 ; 0000 00D8 	// Input Capture Interrupt: Off
                 ; 0000 00D9 	// Compare A Match Interrupt: Off
                 ; 0000 00DA 	// Compare B Match Interrupt: Off
                 ; 0000 00DB 	TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000162 bdef      	OUT  0x2F,R30
                 ; 0000 00DC 	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000163 bdee      	OUT  0x2E,R30
                 ; 0000 00DD 	TCNT1H=0x00;
000164 bded      	OUT  0x2D,R30
                 ; 0000 00DE 	TCNT1L=0x00;
000165 bdec      	OUT  0x2C,R30
                 ; 0000 00DF 	ICR1H=0x00;
000166 bde7      	OUT  0x27,R30
                 ; 0000 00E0 	ICR1L=0x00;
000167 bde6      	OUT  0x26,R30
                 ; 0000 00E1 	OCR1AH=0x00;
000168 bdeb      	OUT  0x2B,R30
                 ; 0000 00E2 	OCR1AL=0x00;
000169 bdea      	OUT  0x2A,R30
                 ; 0000 00E3 	OCR1BH=0x00;
00016a bde9      	OUT  0x29,R30
                 ; 0000 00E4 	OCR1BL=0x00;
00016b bde8      	OUT  0x28,R30
                 ; 0000 00E5 
                 ; 0000 00E6 	// Timer/Counter 2 initialization
                 ; 0000 00E7 	// Clock source: System Clock
                 ; 0000 00E8 	// Clock value: Timer2 Stopped
                 ; 0000 00E9 	// Mode: Normal top=0xFF
                 ; 0000 00EA 	// OC2 output: Disconnected
                 ; 0000 00EB 	ASSR=0<<AS2;
00016c bde2      	OUT  0x22,R30
                 ; 0000 00EC 	TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00016d bde5      	OUT  0x25,R30
                 ; 0000 00ED 	TCNT2=0x00;
00016e bde4      	OUT  0x24,R30
                 ; 0000 00EE 	OCR2=0x00;
00016f bde3      	OUT  0x23,R30
                 ; 0000 00EF 
                 ; 0000 00F0 	// Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00F1 	TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000170 bfe9      	OUT  0x39,R30
                 ; 0000 00F2 
                 ; 0000 00F3 	// External Interrupt(s) initialization
                 ; 0000 00F4 	// INT0: Off
                 ; 0000 00F5 	// INT1: Off
                 ; 0000 00F6 	// INT2: Off
                 ; 0000 00F7 	MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000171 bfe5      	OUT  0x35,R30
                 ; 0000 00F8 	MCUCSR=(0<<ISC2);
000172 bfe4      	OUT  0x34,R30
                 ; 0000 00F9 
                 ; 0000 00FA 	// USART initialization
                 ; 0000 00FB 	// USART disabled
                 ; 0000 00FC 	UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000173 b9ea      	OUT  0xA,R30
                 ; 0000 00FD 
                 ; 0000 00FE 	// Analog Comparator initialization
                 ; 0000 00FF 	// Analog Comparator: Off
                 ; 0000 0100 	// The Analog Comparator's positive input is
                 ; 0000 0101 	// connected to the AIN0 pin
                 ; 0000 0102 	// The Analog Comparator's negative input is
                 ; 0000 0103 	// connected to the AIN1 pin
                 ; 0000 0104 	ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000174 e8e0      	LDI  R30,LOW(128)
000175 b9e8      	OUT  0x8,R30
                 ; 0000 0105 	SFIOR=(0<<ACME);
000176 e0e0      	LDI  R30,LOW(0)
000177 bfe0      	OUT  0x30,R30
                 ; 0000 0106 
                 ; 0000 0107 	// ADC initialization
                 ; 0000 0108 	// ADC disabled
                 ; 0000 0109 	ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000178 b9e6      	OUT  0x6,R30
                 ; 0000 010A 
                 ; 0000 010B 	// SPI initialization
                 ; 0000 010C 	// SPI disabled
                 ; 0000 010D 	SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000179 b9ed      	OUT  0xD,R30
                 ; 0000 010E 
                 ; 0000 010F 	// TWI initialization
                 ; 0000 0110 	// TWI disabled
                 ; 0000 0111 	TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00017a bfe6      	OUT  0x36,R30
                 ; 0000 0112 
                 ; 0000 0113 }
00017b 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;void initQueue(struct pQueue *queue){
                 ; 0000 011A void initQueue(struct pQueue *queue){
                 _initQueue:
                 ; .FSTART _initQueue
                 ; 0000 011B     queue->head = 0;
00017c 93ba      	ST   -Y,R27
00017d 93aa      	ST   -Y,R26
                 ;	*queue -> Y+0
00017e 81a8      	LD   R26,Y
00017f 81b9      	LDD  R27,Y+1
000180 e0e0      	LDI  R30,LOW(0)
000181 e0f0      	LDI  R31,HIGH(0)
000182 93ed      	ST   X+,R30
000183 93fc      	ST   X,R31
                 ; 0000 011C }
                 _0x2080001:
000184 9622      	ADIW R28,2
000185 9508      	RET
                 ; .FEND
                 ;
                 ;void enQueue(struct pQueue* queue, struct Node n){
                 ; 0000 011E void enQueue(struct pQueue* queue, struct Node n){
                 ; 0000 011F     struct Node* curr = queue->head;
                 ; 0000 0120     struct Node* node = (struct Node*)malloc(sizeof(n));
                 ; 0000 0121     node->f = n.f;
                 ;	*queue -> Y+10
                 ;	n -> Y+4
                 ;	*curr -> R16,R17
                 ;	*node -> R18,R19
                 ; 0000 0122     node->p = n.p;
                 ; 0000 0123     node->next = 0;
                 ; 0000 0124     if(!queue->head){
                 ; 0000 0125         queue->head = node;
                 ; 0000 0126         return;
                 ; 0000 0127     }
                 ; 0000 0128     if(node->p < queue->head->p){
                 ; 0000 0129         node->next = queue->head;
                 ; 0000 012A         queue->head = node;
                 ; 0000 012B         return;
                 ; 0000 012C     }
                 ; 0000 012D     if(!queue->head->next){
                 ; 0000 012E         queue->head->next = node;
                 ; 0000 012F         return;
                 ; 0000 0130     }
                 ; 0000 0131     while (curr->next->next){
                 ; 0000 0132         if(node->p < curr->next->p){
                 ; 0000 0133             node->next = curr->next;
                 ; 0000 0134             curr->next = node;
                 ; 0000 0135             return;
                 ; 0000 0136         }
                 ; 0000 0137         curr = curr->next;
                 ; 0000 0138     }
                 ; 0000 0139     curr->next->next = node;
                 ; 0000 013A 
                 ; 0000 013B }
                 ;short removeQueue(struct pQueue* queue, struct Node * node) {
                 ; 0000 013C short removeQueue(struct pQueue* queue, struct Node * node) {
                 ; 0000 013D 	struct Node* curr = queue->head;
                 ; 0000 013E 	if (!curr) return 0;
                 ;	*queue -> Y+4
                 ;	*node -> Y+2
                 ;	*curr -> R16,R17
                 ; 0000 013F 	if (node == curr) {
                 ; 0000 0140 		queue->head = queue->head->next;
                 ; 0000 0141 		free(node);
                 ; 0000 0142 		return 1;
                 ; 0000 0143 	}
                 ; 0000 0144 	while (curr->next) {
                 ; 0000 0145 		if (curr->next == node) {
                 ; 0000 0146 			curr->next = curr->next->next;
                 ; 0000 0147 			free(node);
                 ; 0000 0148 			return 1;
                 ; 0000 0149 		}
                 ; 0000 014A 		curr = curr->next;
                 ; 0000 014B 	}
                 ; 0000 014C 	return 0;
                 ; 0000 014D }
                 ;struct Node* deQueue(struct pQueue* queue){
                 ; 0000 014E struct Node* deQueue(struct pQueue* queue){
                 ; 0000 014F     struct Node* temp = queue->head;
                 ; 0000 0150     if(!temp) return 0;
                 ;	*queue -> Y+2
                 ;	*temp -> R16,R17
                 ; 0000 0151     queue->head = queue->head->next;
                 ; 0000 0152     return temp;
                 ; 0000 0153 }
                 ;
                 ;struct Node* searchQueue(struct pQueue* queue,int f){
                 ; 0000 0155 struct Node* searchQueue(struct pQueue* queue,int f){
                 ; 0000 0156     struct Node* curr = queue->head;
                 ; 0000 0157     if(!curr) return 0;
                 ;	*queue -> Y+4
                 ;	f -> Y+2
                 ;	*curr -> R16,R17
                 ; 0000 0158     while(curr->next && curr->f != f) curr = curr->next;
                 ; 0000 0159 return (curr->f==f)?curr:0;
                 ; 0000 015A 
                 ; 0000 015B }
                 ;int sizeOfQueue(struct pQueue* queue) {
                 ; 0000 015C int sizeOfQueue(struct pQueue* queue) {
                 ; 0000 015D 	struct Node* cur = queue->head;
                 ; 0000 015E 	int count = 0;
                 ; 0000 015F 	while (cur!=NULL) { count=7; cur = cur->next;}
                 ;	*queue -> Y+4
                 ;	*cur -> R16,R17
                 ;	count -> R18,R19
                 ; 0000 0160 	return count;
                 ; 0000 0161 
                 ; 0000 0162 }
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __seed_G100:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000186 e0e2      	LDI  R30,LOW(2)
000187 9fea      	MUL  R30,R26
000188 01f0      	MOVW R30,R0
000189 2fa6      	MOV  R26,R22
00018a 0fae      	ADD  R26,R30
00018b 9508      	RET
                 
                 
                 	.CSEG
                 __ANEGW1:
00018c 95f1      	NEG  R31
00018d 95e1      	NEG  R30
00018e 40f0      	SBCI R31,0
00018f 9508      	RET
                 
                 __EQB12:
000190 17ea      	CP   R30,R26
000191 e0e1      	LDI  R30,1
000192 f009      	BREQ __EQB12T
000193 27ee      	CLR  R30
                 __EQB12T:
000194 9508      	RET
                 
                 __MANDW12:
000195 94e8      	CLT
000196 fff7      	SBRS R31,7
000197 c002      	RJMP __MANDW121
000198 dff3      	RCALL __ANEGW1
000199 9468      	SET
                 __MANDW121:
00019a 23ea      	AND  R30,R26
00019b 23fb      	AND  R31,R27
00019c f40e      	BRTC __MANDW122
00019d dfee      	RCALL __ANEGW1
                 __MANDW122:
00019e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   8 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   6 r23:   0 
r24:   7 r25:   2 r26:  75 r27:  33 r28:   6 r29:   1 r30: 107 r31:  21 
x  :   5 y  :  66 z  :   7 
Registers used: 14 out of 35 (40.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   4 
adiw  :   2 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  14 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   5 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   3 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   3 cpc   :   2 cpi   :   4 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  22 ld    :  22 ldd   :  30 ldi   :  62 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   4 movw  :   5 
mul   :   4 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   0 out   :  40 pop   :   0 push  :   0 rcall :  13 ret   :   8 
reti  :   0 rjmp  :  25 rol   :   0 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :   7 sbic  :  11 sbis  :   1 sbiw  :  25 sbr   :   0 sbrc  :   0 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  14 std   :   5 sts   :   0 sub   :   0 subi  :   0 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 37 out of 116 (31.9%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00033e    808     22    830   16384   5.1%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
