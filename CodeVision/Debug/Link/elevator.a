;/*
; * test1.c
; *
; * Created: 3/8/2019 11:24:16 AM
; * Author: Mohammad Amin
; */
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <mega16.h>
;#include <delay.h>
;#include <stdlib.h>
;
;const short int NUM_OF_FLOORS = 3;

	.DSEG
;const short int DELAY_BETWEENLFLOORS = 5000;
;const short int MAX_QUEUE_SIZE = 100;
;
;void prepare7SegDisplay(unsigned char* bcd[],unsigned char* f[]){
; 0000 0011 void prepare7SegDisplay(unsigned char* bcd[],unsigned char* f[]){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0012     *bcd[0] = *f[0] || *f[2];
;PCODE: $0000000F VOL: 0
;	bcd -> Y+2
;	f -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0013     *bcd[1] = *f[1] || *f[2];
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0014     *bcd[2] = 0;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0015     *bcd[3] = 0;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0016 }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;int getFloor(unsigned char* f[]){
; 0000 0017 int getFloor(unsigned char* f[]){
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0018     return *f[2] * 3 + *f[1] * 2 + *f[0] * 1;
;PCODE: $00000049 VOL: 0
;	f -> Y+0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0019 }
;PCODE: $00000061 VOL: 0
;void setFloor(int floor,unsigned char* f[]){
; 0000 001A void setFloor(int floor,unsigned char* f[]){
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 001B     *f[0]=*f[1]=*f[2] = 0;
;PCODE: $00000064 VOL: 0
;	floor -> Y+2
;	f -> Y+0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 001C     *f[0] = floor==1;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 001D     *f[1] = floor==2;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 001E     *f[2] = floor==3;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 001F }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;void moveElevator(int target_floor,unsigned char* up_state,unsigned char* down_state,unsigned char* curr_floor[],unsigne ...
; 0000 0020 void moveElevator(int target_floor,unsigned char* up_state,unsigned char* down_state,unsigned char* curr_floor[],unsigned char* bcd[]){
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0021     int curr_flr_int = getFloor(curr_floor);
; 0000 0022     if(target_floor==curr_flr_int) return;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;	target_floor -> Y+10
;	*up_state -> Y+8
;	*down_state -> Y+6
;	curr_floor -> Y+4
;	bcd -> Y+2
;	curr_flr_int -> R16,R17
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0023 
; 0000 0024     if(target_floor>curr_flr_int){*up_state=1,*down_state=0;}
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0025     else {*up_state=0,*down_state=1;}
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0026     delay_ms(DELAY_BETWEENLFLOORS);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0027     setFloor(target_floor,curr_floor);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0028     prepare7SegDisplay(bcd,curr_floor);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0029 
; 0000 002A }
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;
;struct Node {
;    struct Node* next;
;    int f;
;    int p;
;};
;struct pQueue{
;    struct Node* head;
;};
;void initQueue(struct pQueue *queue){
; 0000 0034 void initQueue(struct pQueue *queue){
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0035     queue->head = 0;
;PCODE: $000000C4 VOL: 0
;	*queue -> Y+0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0036 }
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;
;void enQueue(struct pQueue* queue, struct Node n){
; 0000 0038 void enQueue(struct pQueue* queue, struct Node n){
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0039     struct Node* curr = queue->head;
; 0000 003A     struct Node* node = (struct Node*)malloc(sizeof(n));
; 0000 003B     node->f = n.f;
;PCODE: $000000CD VOL: 0
;	*queue -> Y+10
;	n -> Y+4
;	*curr -> R16,R17
;	*node -> R18,R19
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 003C     node->p = n.p;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 003D     node->next = 0;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 003E     if(!queue->head){
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 003F         queue->head = node;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0040         return;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0041     }
; 0000 0042     if(node->p < queue->head->p){
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0043         node->next = queue->head;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0044         queue->head = node;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0045         return;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0046     }
; 0000 0047     if(!queue->head->next){
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0048         queue->head->next = node;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0049         return;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 004A     }
; 0000 004B     while (curr->next->next){
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 004C         if(node->p < curr->next->p){
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 004D             node->next = curr->next;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 004E             curr->next = node;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 004F             return;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0050         }
; 0000 0051         curr = curr->next;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0052     }
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0053     curr->next->next = node;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0054 
; 0000 0055 }
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;struct Node* deQueue(struct pQueue* queue){
; 0000 0056 struct Node* deQueue(struct pQueue* queue){
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0057     struct Node* temp = queue->head;
; 0000 0058     if(!temp) return 0;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;	*queue -> Y+2
;	*temp -> R16,R17
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0059     queue->head = queue->head->next;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 005A     return temp;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 005B }
;PCODE: $0000014F VOL: 0
;
;struct Node* searchQueue(struct pQueue* queue,int f){
; 0000 005D struct Node* searchQueue(struct pQueue* queue,int f){
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 005E     struct Node* curr = queue->head;
; 0000 005F     if(!curr) return 0;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;	*queue -> Y+4
;	f -> Y+2
;	*curr -> R16,R17
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0060     while(curr->next && curr->f != f) curr = curr->next;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0061 return (curr->f==f)?curr:0;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0062 
; 0000 0063 }
;PCODE: $00000185 VOL: 0
;
;
;void main(void)
; 0000 0067 {
;PCODE: $00000186 VOL: 0
; 0000 0068     struct pQueue queue;
; 0000 0069     unsigned char* is_up;
; 0000 006A     unsigned char* is_down;
; 0000 006B     unsigned char* is_empty;
; 0000 006C     unsigned char* is_notempty;
; 0000 006D     unsigned char* is_overweight;
; 0000 006E     unsigned char* elev_floors[NUM_OF_FLOORS];
; 0000 006F     unsigned char* in_btns[NUM_OF_FLOORS];
; 0000 0070     unsigned char* out_btns[NUM_OF_FLOORS];
; 0000 0071     unsigned char* bcd_7seg_ins[4];
; 0000 0072 
; 0000 0073     initQueue(&queue);
;PCODE: $00000187 VOL: 0
;	queue -> Y+30
;	*is_up -> R16,R17
;	*is_down -> R18,R19
;	*is_empty -> R20,R21
;	*is_notempty -> Y+28
;	*is_overweight -> Y+26
;	elev_floors -> Y+20
;	in_btns -> Y+14
;	out_btns -> Y+8
;	bcd_7seg_ins -> Y+0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0074 
; 0000 0075     DDRA = 0b11110011;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0076     DDRB = 0b00000111;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 0077     DDRC = 0b00000000;
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0078     DDRD = 0b00000000;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0079 
; 0000 007A     is_up = &PINA.0;
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 007B     is_down = &PINA.1;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 007C 
; 0000 007D     bcd_7seg_ins[0] = &PORTA.4;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 007E     bcd_7seg_ins[1] = &PORTA.5;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 007F     bcd_7seg_ins[2] = &PORTA.6;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 0080     bcd_7seg_ins[3] = &PORTA.7;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0081 
; 0000 0082     is_empty = &PINB.5;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0083     is_notempty = &PINB.6;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 0084     is_overweight = &PINB.7;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0085 
; 0000 0086 //    elev_floors[0] = &PINB.0;
; 0000 0087 //    elev_floors[1] = &PINB.1;
; 0000 0088 //    elev_floors[2] = &PINB.2;
; 0000 0089     elev_floors[0] = &PORTB.0;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 008A     elev_floors[1] = &PORTB.1;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 008B     elev_floors[2] = &PORTB.2;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 008C 
; 0000 008D     in_btns[0] = &PINC.0;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 008E     in_btns[1] = &PINC.1;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 008F     in_btns[2] = &PINC.2;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0090 
; 0000 0091     out_btns[0] = &PIND.0;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0092     out_btns[1] = &PIND.1;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0093     out_btns[2] = &PIND.2;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 0094 
; 0000 0095 
; 0000 0096     //Initial state:
; 0000 0097     *is_down = 0;
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 0098     *is_up = 0;
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0099     *is_empty = 1;
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 009A     *is_notempty = 0;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 009B     *is_overweight = 0;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 009C     *elev_floors[0] = 1;
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 009D     *elev_floors[1] = 0;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 009E     *elev_floors[2] = 0;
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 009F 
; 0000 00A0 
; 0000 00A1 
; 0000 00A2     while (1)
;PCODE: $000001D7 VOL: 0
; 0000 00A3     {
; 0000 00A4         int cur_floor = getFloor(elev_floors);
; 0000 00A5         int i,o;
; 0000 00A6         prepare7SegDisplay(bcd_7seg_ins,elev_floors);
;PCODE: $000001D8 VOL: 0
;	queue -> Y+36
;	*is_notempty -> Y+34
;	*is_overweight -> Y+32
;	elev_floors -> Y+26
;	in_btns -> Y+20
;	out_btns -> Y+14
;	bcd_7seg_ins -> Y+6
;	cur_floor -> Y+4
;	i -> Y+2
;	o -> Y+0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 00A7         if(!(i=getFloor(in_btns))||!(o=getFloor(out_btns))){
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 00A8             if(i!=cur_floor){
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 00A9                 struct Node n;
; 0000 00AA                 n.f = i;
;PCODE: $000001F0 VOL: 0
;	queue -> Y+42
;	*is_notempty -> Y+40
;	*is_overweight -> Y+38
;	elev_floors -> Y+32
;	in_btns -> Y+26
;	out_btns -> Y+20
;	bcd_7seg_ins -> Y+12
;	cur_floor -> Y+10
;	i -> Y+8
;	o -> Y+6
;	n -> Y+0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 00AB                 n.p = abs(i-cur_floor);
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 00AC                 if(!searchQueue(&queue,i)) enQueue(&queue,n);
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 00AD             }
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 00AE             if(o!=cur_floor){
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 00AF                 struct Node n;
; 0000 00B0                 n.f = o;
;PCODE: $0000020B VOL: 0
;	queue -> Y+42
;	*is_notempty -> Y+40
;	*is_overweight -> Y+38
;	elev_floors -> Y+32
;	in_btns -> Y+26
;	out_btns -> Y+20
;	bcd_7seg_ins -> Y+12
;	cur_floor -> Y+10
;	i -> Y+8
;	o -> Y+6
;	n -> Y+0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 00B1                 n.p = abs(o-cur_floor);
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 00B2                 if(!searchQueue(&queue,o)) enQueue(&queue,n);
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 00B3             }
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 00B4         }
;PCODE: $00000221 VOL: 0
; 0000 00B5         if(queue.head){
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 00B6             moveElevator(deQueue(&queue)->f,is_up,is_down,elev_floors,bcd_7seg_ins);
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 00B7 
; 0000 00B8         }
; 0000 00B9     }
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 00BA }
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
